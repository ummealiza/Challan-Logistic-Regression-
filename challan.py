# -*- coding: utf-8 -*-
"""Challan

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14dIR394WbR3Xg3O9ItsctyNPm0ZeeECp
"""

# Commented out IPython magic to ensure Python compatibility.
#first import the library
import pandas as pd
pd.set_option('display.max_rows', None)
from numpy import nan
import joblib
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import mean_squared_error, r2_score
import sklearn
from sklearn import linear_model
# datasert load
dataset = pd.read_csv("/content/Challan.csv")

# a list with all missing value formats 
missing_value_formats = ["n.a" , "t" ,"t'" "a" , "?" , "--" , "n/a","" ]
dataset = pd.read_csv("/content/Challan.csv", na_values = missing_value_formats)

#to print null values in data
print(dataset.isnull())


#Remove missing values
dataset.dropna(inplace=True)
#print(dataset.head)

#slicing
X_features_input = dataset.iloc[:, :-1].values #features[rows, columms]

#to print input features
print(X_features_input)
y_label_output = dataset.iloc[:, 3].values #labels (output)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_features_input, y_label_output, test_size=0.20, random_state=5)
#x_train = 80% of our features data(input)
#x_test = 20% of our features data(input)
#y_train = 80% of our lable data(output)
#y_test = 20 % of pur lable data(output)

#Create logistic regression object
regr = linear_model.LogisticRegression()
#print(regr)
#Train the model using the training sets
 
regr.fit(X_train, y_train)
# save the model to disk


filename = 'finalized_model.sav'
joblib.dump(regr, 'finalized_model.sav')
 
# some time later...
 
# load the model from disk
loaded_model = joblib.load('finalized_model.sav')
print('Accuracy of loaded model')
result = loaded_model.score(X_test, y_test)
print(result)

#Make predictions using the testing set
y_pred = loaded_model.predict(X_test)
print(y_pred)

#The coefficients
print('Coefficients: \n', loaded_model.coef_)
# The mean squared error
print('Mean squared error: %.2f'
#       % mean_squared_error(y_test, y_pred))

#The coefficient of determination: 1 is perfect prediction
print('Coefficient of determination: %.2f'
#       % r2_score(y_test, y_pred))



from sklearn.metrics import accuracy_score
print('Accuracy Score: ', accuracy_score(y_pred, y_test)) #y_pred is the output

# ask user to enter an area and calculate
# its price using our model
# input_age = int(input("Enter age: "))
# input_Experience = int(input("Enter Experience: "))
# input_Gender = int(input("Enter Gender: "))
output = loaded_model.predict([[10,1,1]])
print(output)

